/**\n * Unit tests for YouTube API utilities\n */\n\nimport { extractVideoId, VideoIdSchema, ERROR_CODES } from '@/lib/youtube-api';\n\ndescribe('YouTube API Utilities', () => {\n  describe('extractVideoId', () => {\n    it('should extract video ID from standard YouTube URL', () => {\n      const url = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';\n      const result = extractVideoId(url);\n      expect(result).toBe('dQw4w9WgXcQ');\n    });\n\n    it('should extract video ID from youtu.be URL', () => {\n      const url = 'https://youtu.be/dQw4w9WgXcQ';\n      const result = extractVideoId(url);\n      expect(result).toBe('dQw4w9WgXcQ');\n    });\n\n    it('should extract video ID from YouTube shorts URL', () => {\n      const url = 'https://www.youtube.com/shorts/dQw4w9WgXcQ';\n      const result = extractVideoId(url);\n      expect(result).toBe('dQw4w9WgXcQ');\n    });\n\n    it('should handle URLs without protocol', () => {\n      const url = 'youtube.com/watch?v=dQw4w9WgXcQ';\n      const result = extractVideoId(url);\n      expect(result).toBe('dQw4w9WgXcQ');\n    });\n\n    it('should handle URLs with additional parameters', () => {\n      const url = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ&t=30s&list=PLrAXtmRdnEQy';\n      const result = extractVideoId(url);\n      expect(result).toBe('dQw4w9WgXcQ');\n    });\n\n    it('should return null for invalid URLs', () => {\n      const invalidUrls = [\n        'https://www.google.com',\n        'not-a-url',\n        'https://www.youtube.com/channel/UC123',\n        '',\n        'https://www.youtube.com/watch?v=',\n      ];\n\n      invalidUrls.forEach(url => {\n        expect(extractVideoId(url)).toBeNull();\n      });\n    });\n\n    it('should return null for malformed video IDs', () => {\n      const invalidUrls = [\n        'https://www.youtube.com/watch?v=short', // Too short\n        'https://www.youtube.com/watch?v=toolongvideoid123', // Too long\n        'https://www.youtube.com/watch?v=invalid@chars', // Invalid characters\n      ];\n\n      invalidUrls.forEach(url => {\n        expect(extractVideoId(url)).toBeNull();\n      });\n    });\n  });\n\n  describe('VideoIdSchema', () => {\n    it('should validate correct video IDs', () => {\n      const validIds = [\n        'dQw4w9WgXcQ',\n        'jNQXAC9IVRw',\n        '9bZkp7q19f0',\n        'K4TOrB7at0Y',\n      ];\n\n      validIds.forEach(id => {\n        const result = VideoIdSchema.safeParse(id);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data).toBe(id);\n        }\n      });\n    });\n\n    it('should reject invalid video IDs', () => {\n      const invalidIds = [\n        '', // Empty\n        'short', // Too short\n        'toolongvideoid123', // Too long\n        'invalid@chars', // Invalid characters\n        'spaces in id', // Spaces\n        '12345678901', // Numbers only but valid length\n      ];\n\n      invalidIds.forEach(id => {\n        const result = VideoIdSchema.safeParse(id);\n        if (id === '12345678901') {\n          // This should actually be valid as it's 11 chars with valid characters\n          expect(result.success).toBe(true);\n        } else {\n          expect(result.success).toBe(false);\n        }\n      });\n    });\n  });\n\n  describe('ERROR_CODES', () => {\n    it('should have all required error codes', () => {\n      expect(ERROR_CODES.INVALID_VIDEO_ID).toBeDefined();\n      expect(ERROR_CODES.VIDEO_NOT_FOUND).toBeDefined();\n      expect(ERROR_CODES.NO_TRANSCRIPT).toBeDefined();\n      expect(ERROR_CODES.FETCH_ERROR).toBeDefined();\n      expect(ERROR_CODES.PARSE_ERROR).toBeDefined();\n      expect(ERROR_CODES.RATE_LIMITED).toBeDefined();\n    });\n\n    it('should have unique error codes', () => {\n      const codes = Object.values(ERROR_CODES);\n      const uniqueCodes = new Set(codes);\n      expect(codes.length).toBe(uniqueCodes.size);\n    });\n  });\n});