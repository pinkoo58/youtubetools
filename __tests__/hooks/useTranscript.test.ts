/**\n * Unit tests for useTranscript hook\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useTranscript } from '@/hooks/useTranscript';\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\ndescribe('useTranscript', () => {\n  beforeEach(() => {\n    (fetch as jest.Mock).mockClear();\n  });\n\n  it('should initialize with default state', () => {\n    const { result } = renderHook(() => useTranscript());\n    \n    expect(result.current.transcript).toBeNull();\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBeNull();\n    expect(typeof result.current.fetchTranscript).toBe('function');\n    expect(typeof result.current.clearError).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  it('should handle successful transcript fetch', async () => {\n    const mockTranscript = {\n      transcript: 'Test transcript content',\n      language: 'en',\n      trackName: 'English',\n      wordCount: 3,\n    };\n\n    (fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockTranscript,\n    });\n\n    const { result } = renderHook(() => useTranscript());\n\n    await act(async () => {\n      await result.current.fetchTranscript('dQw4w9WgXcQ');\n    });\n\n    expect(result.current.transcript).toEqual(mockTranscript);\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBeNull();\n    expect(fetch).toHaveBeenCalledWith(\n      '/api/transcript?videoId=dQw4w9WgXcQ',\n      expect.objectContaining({\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n        },\n      })\n    );\n  });\n\n  it('should handle API error response', async () => {\n    const errorMessage = 'Video not found';\n    \n    (fetch as jest.Mock).mockResolvedValueOnce({\n      ok: false,\n      json: async () => ({ error: errorMessage }),\n    });\n\n    const { result } = renderHook(() => useTranscript());\n\n    await act(async () => {\n      await result.current.fetchTranscript('invalid-id');\n    });\n\n    expect(result.current.transcript).toBeNull();\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBe(errorMessage);\n  });\n\n  it('should handle network error', async () => {\n    (fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n    const { result } = renderHook(() => useTranscript());\n\n    await act(async () => {\n      await result.current.fetchTranscript('dQw4w9WgXcQ');\n    });\n\n    expect(result.current.transcript).toBeNull();\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBe('Network error');\n  });\n\n  it('should handle empty video ID', async () => {\n    const { result } = renderHook(() => useTranscript());\n\n    await act(async () => {\n      await result.current.fetchTranscript('');\n    });\n\n    expect(result.current.transcript).toBeNull();\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBe('Video ID is required');\n    expect(fetch).not.toHaveBeenCalled();\n  });\n\n  it('should set loading state during fetch', async () => {\n    let resolvePromise: (value: any) => void;\n    const promise = new Promise(resolve => {\n      resolvePromise = resolve;\n    });\n\n    (fetch as jest.Mock).mockReturnValueOnce(promise);\n\n    const { result } = renderHook(() => useTranscript());\n\n    act(() => {\n      result.current.fetchTranscript('dQw4w9WgXcQ');\n    });\n\n    expect(result.current.loading).toBe(true);\n    expect(result.current.error).toBeNull();\n    expect(result.current.transcript).toBeNull();\n\n    await act(async () => {\n      resolvePromise!({\n        ok: true,\n        json: async () => ({ transcript: 'test', language: 'en', trackName: 'English', wordCount: 1 }),\n      });\n    });\n\n    expect(result.current.loading).toBe(false);\n  });\n\n  it('should clear error', () => {\n    const { result } = renderHook(() => useTranscript());\n\n    // Set an error first\n    act(() => {\n      result.current.fetchTranscript('');\n    });\n\n    expect(result.current.error).toBe('Video ID is required');\n\n    // Clear the error\n    act(() => {\n      result.current.clearError();\n    });\n\n    expect(result.current.error).toBeNull();\n  });\n\n  it('should reset all state', async () => {\n    const mockTranscript = {\n      transcript: 'Test transcript',\n      language: 'en',\n      trackName: 'English',\n      wordCount: 2,\n    };\n\n    (fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockTranscript,\n    });\n\n    const { result } = renderHook(() => useTranscript());\n\n    // Fetch transcript first\n    await act(async () => {\n      await result.current.fetchTranscript('dQw4w9WgXcQ');\n    });\n\n    expect(result.current.transcript).toEqual(mockTranscript);\n\n    // Reset state\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.transcript).toBeNull();\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBeNull();\n  });\n});