/**\n * Unit tests for YouTube utility functions\n */\n\nimport {\n  extractVideoId,\n  isValidYouTubeUrl,\n  formatTranscriptAsSRT,\n  sanitizeFilename,\n} from '@/utils/youtube';\n\n// Mock DOM APIs for testing\nObject.assign(navigator, {\n  clipboard: {\n    writeText: jest.fn(() => Promise.resolve()),\n  },\n});\n\nObject.assign(window, {\n  isSecureContext: true,\n});\n\n// Mock URL.createObjectURL and revokeObjectURL\nglobal.URL.createObjectURL = jest.fn(() => 'mock-url');\nglobal.URL.revokeObjectURL = jest.fn();\n\n// Mock document methods\nObject.defineProperty(document, 'createElement', {\n  value: jest.fn(() => ({\n    href: '',\n    download: '',\n    style: { display: '' },\n    click: jest.fn(),\n  })),\n});\n\nObject.defineProperty(document.body, 'appendChild', {\n  value: jest.fn(),\n});\n\nObject.defineProperty(document.body, 'removeChild', {\n  value: jest.fn(),\n});\n\ndescribe('YouTube Utilities', () => {\n  describe('extractVideoId', () => {\n    it('should extract video ID from various YouTube URL formats', () => {\n      const testCases = [\n        {\n          url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n          expected: 'dQw4w9WgXcQ',\n        },\n        {\n          url: 'https://youtu.be/dQw4w9WgXcQ',\n          expected: 'dQw4w9WgXcQ',\n        },\n        {\n          url: 'https://www.youtube.com/shorts/dQw4w9WgXcQ',\n          expected: 'dQw4w9WgXcQ',\n        },\n        {\n          url: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\n          expected: 'dQw4w9WgXcQ',\n        },\n        {\n          url: 'youtube.com/watch?v=dQw4w9WgXcQ',\n          expected: 'dQw4w9WgXcQ',\n        },\n      ];\n\n      testCases.forEach(({ url, expected }) => {\n        expect(extractVideoId(url)).toBe(expected);\n      });\n    });\n\n    it('should return null for invalid inputs', () => {\n      const invalidInputs = [\n        null,\n        undefined,\n        '',\n        123,\n        {},\n        'https://www.google.com',\n        'not-a-url',\n      ];\n\n      invalidInputs.forEach(input => {\n        expect(extractVideoId(input as any)).toBeNull();\n      });\n    });\n\n    it('should return null for invalid video IDs', () => {\n      const invalidUrls = [\n        'https://www.youtube.com/watch?v=short',\n        'https://www.youtube.com/watch?v=toolongvideoid123',\n        'https://www.youtube.com/watch?v=invalid@chars',\n      ];\n\n      invalidUrls.forEach(url => {\n        expect(extractVideoId(url)).toBeNull();\n      });\n    });\n  });\n\n  describe('isValidYouTubeUrl', () => {\n    it('should return true for valid YouTube URLs', () => {\n      const validUrls = [\n        'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n        'https://youtu.be/dQw4w9WgXcQ',\n        'https://www.youtube.com/shorts/dQw4w9WgXcQ',\n      ];\n\n      validUrls.forEach(url => {\n        expect(isValidYouTubeUrl(url)).toBe(true);\n      });\n    });\n\n    it('should return false for invalid URLs', () => {\n      const invalidUrls = [\n        'https://www.google.com',\n        'not-a-url',\n        '',\n        'https://www.youtube.com/watch?v=short',\n      ];\n\n      invalidUrls.forEach(url => {\n        expect(isValidYouTubeUrl(url)).toBe(false);\n      });\n    });\n  });\n\n  describe('formatTranscriptAsSRT', () => {\n    it('should format transcript as SRT', () => {\n      const transcript = 'First paragraph.\\n\\nSecond paragraph.\\n\\nThird paragraph.';\n      const result = formatTranscriptAsSRT(transcript);\n      \n      expect(result).toContain('1\\n00:00:00,000 --> 00:00:30,000\\nFirst paragraph.');\n      expect(result).toContain('2\\n00:00:30,000 --> 00:01:00,000\\nSecond paragraph.');\n      expect(result).toContain('3\\n00:01:00,000 --> 00:01:30,000\\nThird paragraph.');\n    });\n\n    it('should handle empty transcript', () => {\n      const result = formatTranscriptAsSRT('');\n      expect(result).toBe('');\n    });\n\n    it('should handle single paragraph', () => {\n      const transcript = 'Single paragraph.';\n      const result = formatTranscriptAsSRT(transcript);\n      expect(result).toContain('1\\n00:00:00,000 --> 00:00:30,000\\nSingle paragraph.');\n    });\n  });\n\n  describe('sanitizeFilename', () => {\n    it('should remove invalid characters', () => {\n      const filename = 'My<Video>Title:With\"Invalid/Characters\\\\|?*';\n      const result = sanitizeFilename(filename);\n      expect(result).toBe('My_Video_Title_With_Invalid_Characters____');\n    });\n\n    it('should replace spaces with underscores', () => {\n      const filename = 'My Video Title With Spaces';\n      const result = sanitizeFilename(filename);\n      expect(result).toBe('My_Video_Title_With_Spaces');\n    });\n\n    it('should limit filename length', () => {\n      const longFilename = 'a'.repeat(150);\n      const result = sanitizeFilename(longFilename);\n      expect(result.length).toBe(100);\n    });\n\n    it('should handle empty filename', () => {\n      const result = sanitizeFilename('');\n      expect(result).toBe('');\n    });\n  });\n});